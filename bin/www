#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('entu:server');
var http = require('http');
var appConfig = require('../config.json');
var genesisblock = require('../genesisBlock.json');
var async = require('async');
var path = require('path');
var fs = require('fs');
var os = require('os');
var Log15 = require('../src/utils/log15.js');
var changeCase = require('change-case');
var WorkQueue = require('../src/utils/workqueue.js');
var Sequelize = require('sequelize');
var z_schema = require('z-schema');

process.stdin.resume();

var versionBuild = fs.readFileSync(path.join(__dirname, '../build'), 'utf8');

var log = new Log15({echo: appConfig.echoLogLevel, recLevel: appConfig.outputLogLevel});

var params = {
    "db": appConfig.db.host,
    "modules": {
        "accounts": "../src/modules/accounts.js",
        "blocks": "../src/modules/blocks.js",
        "crypto": "../src/modules/crypto.js",
        "delegates": "../src/modules/delegates.js",
        "kernel": "../src/modules/kernel.js",
        "loader": "../src/modules/loader.js",
        "multisignatures": "../src/modules/multisignatures.js",
        "peer": "../src/modules/peer.js",
        "round": "../src/modules/round.js",
        "server": "../src/modules/server.js",
        "signatures": "../src/modules/signatures.js",
        "system": "../src/modules/system.js",
        "transactions": "../src/modules/transactions.js",
    }
}

process.on('uncaughtException', function (err) {
    // handle the error safely
    log.fatal('System error', { message: err.message, stack: err.stack });
    process.emit('cleanup');
});

var d = require('domain').create();
d.on('error', function (err) {
    log.Fatal('Domain master', "Error", err.message, "Stack", err.stack);
    process.exit(0);
});
d.run(function () {
    var modules = [];
    var modules_name = [];

    log.Info("Starting peer-to-peer node", "instance", "Entu/v0.1.3-stable-66432f38/darwin-amd64/javascript");

    async.auto({

        log: function (cb) {
            cb(null, log);
        },

        config: ['log', function (scope, cb) {
            scope.log.Info("Initialized chain confirguration", "port", appConfig.port);

            if (appConfig.peers) {
                scope.log.Info("Maximum peer count", "peer", appConfig.peers.list.length, "blacklist", appConfig.peers.blackList.length, "timeout", appConfig.peers.optional.timeout);
            }

            cb(null, appConfig);
        }],

        build: function (cb) {
            cb(null, versionBuild);
        },

        genesisblock: function (cb) {
            cb(null, {
                block: genesisblock
            });
        },

        public: function (cb) {
            cb(null, path.join(__dirname, '../public'));
        },

        schema: function (cb) {
            z_schema.registerFormat('hex', function (str) {
                try {
                    new Buffer(str, 'hex');
                } catch (err) {
                    return false;
                }

                return true;
            });

            z_schema.registerFormat('hex', function (str) {
                if (str.length === 0) {
                    return true;
                }

                try {
                    var publicKey = new Buffer(str, 'hex');

                    return publicKey.length == 32;
                } catch (err) {
                    return false;
                }

                return true;
            });

            z_schema.registerFormat('splitArray', function (str) {
                try {
                    var arr = str.split(',');
                    if (arr.length > 0 && a.length <= 1000) {
                        return true;
                    } else {
                        return false;
                    }
                } catch (err) {
                    return false;
                }
            });

            z_schema.registerFormat('signature', function (str) {
                if (str.length === 0) {
                    return true;
                }

                try {
                    var signature = new Buffer(str, 'hex');
                    return signature.length == 64;
                } catch (err) {
                    return false;
                }
            });

            z_schema.registerFormat('listQuery', function (obj) {
                obj.limit = 100;
                return true;
            });

            z_schema.registerFormat('listDelegates', function (obj) {
                obj.limit = 101;
                return true;
            });

            z_schema.registerFormat('checkInt', function (value) {
                if (isNaN(value) || parseInt(value) != value || isNaN(parseInt(value, 10))) {
                    return false;
                }

                value = parseInt(value);
                return true;
            });

            z_schema.registerFormat('ip', function (str) {

            });

            cb(null, new z_schema());
        },

        dbWorkQueue: ['log', function (scope, cb) {
            var queue = new WorkQueue({
                onWarning: function (current, limit) {
                    scope.log.Info("DB queue", "current", current, "limit", limit);
                }
            });
            cb(null, queue);
        }],

        mainWorkQueue: ['log', function (scope, cb) {
            var queue = new WorkQueue({
                onWarning: function (current, limit) {
                    scope.log.Info("Main queue", "current", current, "limit", limit);
                }
            });
            cb(null, queue);
        }],

        balancesWorkQueue: ['log', function (scope, cb) {
            var queue = new WorkQueue({
                onWarning: function (current, limit) {
                    scope.log.Info("Balance queue", "current", current, "limit", limit);
                }
            });
            cb(null, queue);
        }],

        dbClient: ['config', 'log', 'genesisblock', function (scope, cb) {
            scope.log.Info("Database opened", "database", scope.config.db.name, "host", scope.config.db.host, "port", scope.config.db.port);

            var sequelize = new Sequelize(scope.config.db.name, scope.config.db.user, scope.config.db.password, {
                host: scope.config.db.host,
                dialect: 'mysql',
                logging: false,
                pool: {
                    max: 10,
                    min: 0,
                    acquire: 30000,
                    idle: 30000
                }
            });
            cb(null, sequelize);
        }],

        network: ['dbWorkQueue', 'mainWorkQueue', 'balancesWorkQueue', 'dbClient', function (scope, cb) {
            scope.log.Info("Starting P2P networking");

            app.use(require('../src/utils/zscheme-express.js')(scope.schema));
            var server = http.createServer(app);
            server.on('error', onError);
            server.listen(scope.config.port, scope.config.address, function (err) {
                scope.log.Info("HTTP endpoint opened", "url", "http://"+getPublicIp()+":8000");

                cb(err, {
                    app: app,
                    server: server
                });
            });
        }],

        notification_center: function (cb) {
            var ncenter = function () {
                this.notify = function () {
                    var args = [];
                    Array.prototype.push.apply(args, arguments);
                    var command = args.shift();
                    modules.forEach(function (module) {
                        var eventName = 'on' + changeCase.pascalCase(command);
                        if (typeof(module[eventName]) == 'function') {
                            module[eventName].apply(module[eventName], args);
                        }
                    });
                }
            }
            cb(null, new ncenter);
        },

        base: ['config', 'genesisblock', 'dbClient', 'notification_center', function (scope, cb) {
            var Account = require('../src/base/Account.js');
            var Block = require('../src/base/block.js');
            var Transaction = require('../src/base/transaction.js');

            async.auto({
                config: function (cb) {
                    cb(null, scope.config);
                },
                genesisblock: function (cb) {
                    cb(null, scope.genesisblock);
                },
                dbClient: function (cb) {
                    cb(null, scope.dbClient);
                },
                notification_center: function (cb) {
                    cb(null, scope.notification_center);
                },
                account: ['config', 'dbClient', 'notification_center', function (scope, cb) {
                    new Account(scope, cb);
                }],
                block: ['config', 'dbClient', 'notification_center', function(scope, cb) {
                    new Block(scope, cb);
                }],
                transaction: ['config', 'dbClient', 'notification_center', function (scope, cb) {
                    new Transaction(scope, cb);
                }],
            }, cb);
        }],

        modules: ['network', 'notification_center', 'base', function (scope, cb) {
            var __modules = {};
            Object.keys(params.modules).forEach(function (module_name) {
                __modules[module_name] = function (cb) {
                    var d = require('domain').create();
                    d.on('error', function (err) {
                        scope.log.Fatal('Domain ' + module_name, "Error", err.message, "Stack", err.stack);
                    });
                    d.run(function () {
                        var Klass = require(params.modules[module_name]);
                        var obj = new Klass(cb, scope);
                        modules.push(obj);
                    });
                }
                modules_name.push(module_name);
            });
            async.parallel(__modules, function (err, modules) {
                cb(err, modules);
            })
        }],

        ready: ['network', 'modules', 'notification_center', function (scope, cb) {
            scope.notification_center.notify('init', scope.modules);
            cb();
        }]
    }, function (err, scope) {
        if (err) {
            scope.log.Fatal(err.toString());
        }

        scope.log.Info("Modules are initialized and launched", "modules", "{"+modules_name.join(',')+"}");

        process.once('cleanup', function () {
            scope.log.Info("Got interrupt, shutting down...");
            scope.log.Info("HTTP endpoint closed", "url", "http://"+getPublicIp()+":8000");
            scope.log.Info("Blockchain manager stopped");
            scope.log.Info("Database closed", "database", scope.config.db.name, "host", scope.config.db.host, "port", scope.config.db.port);

            process.exit(1);
        });

        process.once('SIGTERM', function () {
            process.emit('cleanup');
        });

        process.once('exit', function () {
            process.emit('cleanup');
        });

        process.once('SIGINT', function () {
            process.emit('cleanup');
        });
    })
});

function onError(error) {
  if (error.syscall !== 'listen') {
    throw new Error(error);
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
        log.Fatal('port requires elevated privileges');
          process.exit(1);
          break;
    case 'EADDRINUSE':
        log.Fatal('port or address is already in use');
          process.exit(1);
          break;
    default:
        throw new Error(error);
  }
}

function getPublicIp() {
    var publicIp = null;
    try {
        var ifaces = os.networkInterfaces();
        Object.keys(ifaces).forEach(function (ifname) {
            ifaces[ifname].forEach(function (iface) {
                if ('IPv4' !== iface.family || iface.internal !== false) {
                    // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
                    return;
                }
                // if (!ip.isPrivate(iface.address)) {
                //     publicIp = iface.address;
                // }
                publicIp = iface.address;
            });
        });
    } catch (e) {
    }
    return publicIp;
}
